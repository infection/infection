#!/usr/bin/env bash

cd tests/e2e

failure="false"

:> error.log

run_infection_for_dir() {
    dir=$1
    infection_executable=${2:-bin/infection}

    cd "$dir"
    echo -e "\n$dir\n";

    if [ -f composer.json ] || [ -f composer.lock ]
    then
        composer install > /dev/null 2>&1
    fi

    if [ -f "run_tests.bash" ]
    then
        output="$(INFECTION_E2E_TESTS_ENV=1 bash run_tests.bash $infection_executable 2>&1)"
    else
        output="$(INFECTION_E2E_TESTS_ENV=1 bash ../standard_script.bash $infection_executable 2>&1)"
    fi

    if [ $? != 0 ]
    then
        failure="true"
        echo "$dir" >> ../error.log
        echo "$output" >> ../error.log
        echo "" >> ../error.log
    fi
    cd ..

    if [ "$failure" = "true" ]
    then
        exit 255
    fi
}

exitOnError() {
    exit_code=$1
    msg=$2
    if [ "$exit_code" -ne 0 ]; then
        echo -e "\033[31mEXIT $exit_code $msg\033[0m" >&2
        # If any invocation of the command exits with a status of 255, xargs will stop immediately without reading any further input.
        # An error message is issued on stderr when this happens.
        exit 255
    fi
}

echo "GITHUB_HEAD_REF=$GITHUB_HEAD_REF";
cat "$GITHUB_EVENT_PATH"

if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
  # Extract the repo full names from the event payload
  pr_repo_full_name=$(jq -r .pull_request.head.repo.full_name "$GITHUB_EVENT_PATH")
  base_repo_full_name=$(jq -r .repository.full_name "$GITHUB_EVENT_PATH")

  echo $pr_repo_full_name
  echo base_repo_full_name

  # Compare the two repositories
  if [[ "$pr_repo_full_name" != "$base_repo_full_name" ]]; then
    echo "This pull request is from a forked repository."
  else
    echo "This pull request is from the same repository."
  fi
else
  echo "This is not a pull request event."
fi

echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY";
echo "$(env)"

e2e_tests_dirs=$(find . -maxdepth 1 -mindepth 1 -type d)

# Export the function so xargs can use it
export -f run_infection_for_dir

# Use xargs to run the run_infection_for_dir function in parallel
echo "$e2e_tests_dirs" | xargs -I {} -P 4 bash -c "run_infection_for_dir {} ${1:-bin/infection}"

exitOnError $? "One of the e2e tests failed, check the logs \n\n$(cat error.log)"

echo -e "\nSuccess"
exit 0
