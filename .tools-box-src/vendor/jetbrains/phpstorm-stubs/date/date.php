<?php


use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;
















#[Pure(true)]
function strtotime(string $datetime, ?int $baseTimestamp): int|false {}













































































































































































































































































#[Pure(true)]
#[LanguageLevelTypeAware(["8.0" => "string"], default: "string|false")]
function date(string $format, ?int $timestamp) {}






























































































#[Pure(true)]
function idate(string $format, ?int $timestamp): int|false {}













#[Pure(true)]
#[LanguageLevelTypeAware(["8.0" => "string"], default: "string|false")]
function gmdate(string $format, ?int $timestamp) {}



















































#[Pure(true)]
function mktime(
#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] int $hour = null,
#[PhpStormStubsElementAvailable(from: '8.0')] int $hour,
?int $minute = null,
?int $second = null,
?int $month = null,
?int $day = null,
?int $year = null,
#[Deprecated('Use the new timezone handling functions instead', since: '5.3')]
#[PhpStormStubsElementAvailable(from: '5.5', to: '5.6')] $is_dst = -1
): int|false {}




























#[Pure(true)]
function gmmktime(
#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] int $hour = null,
#[PhpStormStubsElementAvailable(from: '8.0')] int $hour,
?int $minute = null,
?int $second = null,
?int $month = null,
?int $day = null,
?int $year = null,
#[PhpStormStubsElementAvailable(from: '5.5', to: '5.6')] $is_dst = null
): int|false {}

















#[Pure(true)]
function checkdate(int $month, int $day, int $year): bool {}


































































































































































































































































#[Deprecated(since: '8.1')]
function strftime(string $format, ?int $timestamp): string|false {}















#[Deprecated(since: '8.1')]
function gmstrftime(string $format, ?int $timestamp): string|false {}






function time(): int {}
















#[Pure(true)]
function localtime(?int $timestamp, bool $associative = false): array {}
















































































#[Pure(true)]
function getdate(?int $timestamp): array {}












#[Pure(true)]
function date_create(string $datetime = 'now', ?DateTimeZone $timezone): DateTime|false {}
















#[Pure(true)]
function date_create_immutable(string $datetime = 'now', ?DateTimeZone $timezone): DateTimeImmutable|false {}









#[Pure(true)]
function date_create_immutable_from_format(string $format, string $datetime, ?DateTimeZone $timezone): DateTimeImmutable|false {}














#[Pure(true)]
function date_create_from_format(string $format, string $datetime, ?DateTimeZone $timezone): DateTime|false {}










#[Pure(true)]
#[LanguageLevelTypeAware(["8.0" => "array"], default: "array|false")]
function date_parse(string $datetime): false|array {}












#[Pure(true)]
function date_parse_from_format(string $format, string $datetime): array {}








#[ArrayShape(["warning_count" => "int", "warnings" => "string[]", "error_count" => "int", "errors" => "string[]"])]
#[Pure(true)]
function date_get_last_errors(): array|false {}









#[Pure(true)]
#[LanguageLevelTypeAware(["8.0" => "string"], default: "string|false")]
function date_format(DateTimeInterface $object, string $format) {}











function date_modify(DateTime $object, string $modifier): DateTime|false {}













#[LanguageLevelTypeAware(["8.0" => "DateTime"], default: "DateTime|false")]
function date_add(DateTime $object, DateInterval $interval) {}














#[LanguageLevelTypeAware(["8.0" => "DateTime"], default: "DateTime|false")]
function date_sub(DateTime $object, DateInterval $interval) {}
















#[Pure(true)]
function date_timezone_get(DateTimeInterface $object): DateTimeZone|false {}














#[LanguageLevelTypeAware(["8.0" => "DateTime"], default: "DateTime|false")]
function date_timezone_set(#[LanguageLevelTypeAware(["8.0" => "DateTime"], default: "DateTimeInterface")] $object, DateTimeZone $timezone) {}









#[Pure(true)]
#[LanguageLevelTypeAware(["8.0" => "int"], default: "int|false")]
function date_offset_get(DateTimeInterface $object) {}











#[Pure(true)]
#[LanguageLevelTypeAware(["8.0" => "DateInterval"], default: "DateInterval|false")]
function date_diff(DateTimeInterface $baseObject, DateTimeInterface $targetObject, bool $absolute = false) {}













function date_time_set(
DateTime $object,
int $hour,
int $minute,
int $second = 0,
#[PhpStormStubsElementAvailable(from: '7.1')] int $microsecond = 0
): DateTime {}

















#[LanguageLevelTypeAware(["8.0" => "DateTime"], default: "DateTime|false")]
function date_date_set(DateTime $object, int $year, int $month, int $day): DateTime|false {}













#[LanguageLevelTypeAware(["8.0" => "DateTime"], default: "DateTime|false")]
function date_isodate_set(DateTime $object, int $year, int $week, int $dayOfWeek = 1) {}













#[LanguageLevelTypeAware(["8.0" => "DateTime"], default: "DateTime|false")]
function date_timestamp_set(DateTime $object, int $timestamp): DateTime|false {}









#[Pure(true)]
function date_timestamp_get(DateTimeInterface $object): int {}










#[Pure(true)]
function timezone_open(string $timezone): DateTimeZone|false {}









#[Pure]
function timezone_name_get(DateTimeZone $object): string {}





















#[Pure(true)]
function timezone_name_from_abbr(string $abbr, int $utcOffset = -1, int $isDST = -1): string|false {}












#[Pure(true)]
#[LanguageLevelTypeAware(["8.0" => "int"], default: "int|false")]
function timezone_offset_get(DateTimeZone $object, DateTimeInterface $datetime) {}













#[Pure(true)]
function timezone_transitions_get(DateTimeZone $object, int $timestampBegin, int $timestampEnd): array|false {}








#[Pure(true)]
function timezone_location_get(DateTimeZone $object): array|false {}











#[Pure(true)]
#[LanguageLevelTypeAware(["8.0" => "array"], default: "array|false")]
function timezone_identifiers_list(int $timezoneGroup = DateTimeZone::ALL, ?string $countryCode) {}








#[Pure]
#[LanguageLevelTypeAware(["8.0" => "array"], default: "array|false")]
function timezone_abbreviations_list() {}






#[Pure]
function timezone_version_get(): string {}












#[Pure(true)]
function date_interval_create_from_date_string(string $datetime): DateInterval|false {}









#[Pure(true)]
function date_interval_format(DateInterval $object, string $format): string {}













function date_default_timezone_set(string $timezoneId): bool {}






#[Pure]
function date_default_timezone_get(): string {}

















































#[Pure(true)]
#[Deprecated(reason: 'in 8.1.  Use date_sun_info instead', since: '8.1')]
function date_sunrise(int $timestamp, int $returnFormat = SUNFUNCS_RET_STRING, ?float $latitude, ?float $longitude, ?float $zenith, ?float $utcOffset): string|int|float|false {}

















































#[Pure(true)]
#[Deprecated(reason: 'in 8.1.  Use date_sun_info instead', since: '8.1')]
function date_sunset(int $timestamp, int $returnFormat = SUNFUNCS_RET_STRING, ?float $latitude, ?float $longitude, ?float $zenith, ?float $utcOffset): string|int|float|false {}









































#[Pure(true)]
#[LanguageLevelTypeAware(["8.0" => "array"], default: "array|false")]
function date_sun_info(int $timestamp, float $latitude, float $longitude): array|false {}


