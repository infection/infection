<?php

use JetBrains\PhpStorm\Deprecated;







class Redis
{
public const AFTER = 'after';
public const BEFORE = 'before';




public const OPT_SERIALIZER = 1;
public const OPT_PREFIX = 2;
public const OPT_READ_TIMEOUT = 3;
public const OPT_SCAN = 4;
public const OPT_FAILOVER = 5;
public const OPT_TCP_KEEPALIVE = 6;
public const OPT_COMPRESSION = 7;
public const OPT_REPLY_LITERAL = 8;
public const OPT_COMPRESSION_LEVEL = 9;
public const OPT_MAX_RETRIES = 11;
public const OPT_BACKOFF_ALGORITHM = 12;
public const OPT_BACKOFF_BASE = 13;
public const OPT_BACKOFF_CAP = 14;




public const FAILOVER_NONE = 0;
public const FAILOVER_ERROR = 1;
public const FAILOVER_DISTRIBUTE = 2;
public const FAILOVER_DISTRIBUTE_SLAVES = 3;




public const SCAN_NORETRY = 0;
public const SCAN_RETRY = 1;




public const SCAN_PREFIX = 2;




public const SCAN_NOPREFIX = 3;




public const SERIALIZER_NONE = 0;
public const SERIALIZER_PHP = 1;
public const SERIALIZER_IGBINARY = 2;
public const SERIALIZER_MSGPACK = 3;
public const SERIALIZER_JSON = 4;




public const COMPRESSION_NONE = 0;
public const COMPRESSION_LZF = 1;
public const COMPRESSION_ZSTD = 2;
public const COMPRESSION_LZ4 = 3;




public const COMPRESSION_ZSTD_MIN = 1;
public const COMPRESSION_ZSTD_DEFAULT = 3;
public const COMPRESSION_ZSTD_MAX = 22;




public const ATOMIC = 0;
public const MULTI = 1;
public const PIPELINE = 2;




public const REDIS_NOT_FOUND = 0;
public const REDIS_STRING = 1;
public const REDIS_SET = 2;
public const REDIS_LIST = 3;
public const REDIS_ZSET = 4;
public const REDIS_HASH = 5;
public const REDIS_STREAM = 6;





public const BACKOFF_ALGORITHM_DEFAULT = 0;
public const BACKOFF_ALGORITHM_DECORRELATED_JITTER = 1;
public const BACKOFF_ALGORITHM_FULL_JITTER = 2;
public const BACKOFF_ALGORITHM_EQUAL_JITTER = 3;
public const BACKOFF_ALGORITHM_EXPONENTIAL = 4;
public const BACKOFF_ALGORITHM_UNIFORM = 5;
public const BACKOFF_ALGORITHM_CONSTANT = 6;






public function __construct() {}























public function connect(
$host,
$port = 6379,
$timeout = 0.0,
$reserved = null,
$retry_interval = 0,
$read_timeout = 0.0
) {}















#[Deprecated(replacement: '%class%->connect(%parametersList%)')]
public function open(
$host,
$port = 6379,
$timeout = 0.0,
$reserved = null,
$retryInterval = 0,
$readTimeout = 0.0
) {}








public function isConnected() {}








public function getHost() {}








public function getPort() {}









public function getDbNum() {}








public function getTimeout() {}









public function getReadTimeout() {}











public function getPersistentID() {}









public function getAuth() {}










































public function pconnect(
$host,
$port = 6379,
$timeout = 0.0,
$persistentId = null,
$retryInterval = 0,
$readTimeout = 0.0
) {}













#[Deprecated(replacement: '%class%->pconnect(%parametersList%)')]
public function popen(
$host,
$port = 6379,
$timeout = 0.0,
$persistentId = '',
$retryInterval = 0,
$readTimeout = 0.0
) {}












public function close() {}





















public function swapdb(int $db1, int $db2) {}






























public function setOption($option, $value) {}















public function getOption($option) {}











public function ping($message = null) {}












public function echo($message) {}






























public function get($key) {}


































public function set($key, $value, $timeout = null) {}















public function setex($key, $expire, $value) {}
















public function psetex($key, $expire, $value) {}


















public function setnx($key, $value) {}























public function del($key1, ...$otherKeys) {}










#[Deprecated(replacement: "%class%->del(%parametersList%)")]
public function delete($key1, $key2 = null, $key3 = null) {}
























public function unlink($key1, $key2 = null, $key3 = null) {}
































public function multi($mode = Redis::MULTI) {}






























public function pipeline() {}









public function exec() {}







public function discard() {}





















public function watch($key) {}







public function unwatch() {}




































public function subscribe($channels, $callback) {}





















public function psubscribe($patterns, $callback) {}
















public function publish($channel, $message) {}


























public function pubsub($keyword, $argument) {}










public function unsubscribe($channels = null) {}










public function punsubscribe($patterns = null) {}


























public function exists($key) {}



















public function incr($key) {}



















public function incrByFloat($key, $increment) {}






















public function incrBy($key, $value) {}


















public function decr($key) {}





















public function decrBy($key, $value) {}



























public function lPush($key, ...$value1) {}



























public function rPush($key, ...$value1) {}






















public function lPushx($key, $value) {}






















public function rPushx($key, $value) {}



















public function lPop($key) {}



















public function rPop($key) {}











































public function blPop($keys, $timeout) {}












































public function brPop(array $keys, $timeout) {}























public function lLen($key) {}










#[Deprecated(replacement: '%class%->lLen(%parametersList%)')]
public function lSize($key) {}


























public function lIndex($key, $index) {}










#[Deprecated(replacement: '%class%->lIndex(%parametersList%)')]
public function lGet($key, $index) {}
























public function lSet($key, $index, $value) {}























public function lRange($key, $start, $end) {}











#[Deprecated(replacement: '%class%->lRange(%parametersList%)')]
public function lGetRange($key, $start, $end) {}























public function lTrim($key, $start, $stop) {}










#[Deprecated(replacement: '%class%->lTrim(%parametersList%)')]
public function listTrim($key, $start, $stop) {}





























public function lRem($key, $value, $count) {}










#[Deprecated(replacement: '%class%->lRem(%parametersList%)')]
public function lRemove($key, $value, $count) {}


































public function lInsert($key, $position, $pivot, $value) {}



















public function sAdd($key, ...$value1) {}























public function sRem($key, ...$member1) {}









#[Deprecated(replacement: '%class%->sRem(%parametersList%)')]
public function sRemove($key, ...$member1) {}

























public function sMove($srcKey, $dstKey, $member) {}






















public function sIsMember($key, $value) {}









#[Deprecated(replacement: '%class%->sIsMember(%parametersList%)')]
public function sContains($key, $value) {}




















public function sCard($key) {}
































public function sPop($key, $count = 1) {}































public function sRandMember($key, $count = 1) {}






































public function sInter($key1, ...$otherKeys) {}







































public function sInterStore($dstKey, $key1, ...$otherKeys) {}



































public function sUnion($key1, ...$otherKeys) {}








































public function sUnionStore($dstKey, $key1, ...$otherKeys) {}


































public function sDiff($key1, ...$otherKeys) {}





































public function sDiffStore($dstKey, $key1, ...$otherKeys) {}































public function sMembers($key) {}









#[Deprecated(replacement: '%class%->sMembers(%parametersList%)')]
public function sGetMembers($key) {}
























public function sScan($key, &$iterator, $pattern = null, $count = 0) {}



















public function getSet($key, $value) {}















public function randomKey() {}




















public function select($dbIndex) {}





















public function move($key, $dbIndex) {}




















public function rename($srcKey, $dstKey) {}









#[Deprecated(replacement: '%class%->rename(%parametersList%)')]
public function renameKey($srcKey, $dstKey) {}























public function renameNx($srcKey, $dstKey) {}




















public function expire($key, $ttl) {}




















public function pExpire($key, $ttl) {}










#[Deprecated(replacement: '%class%->expire(%parametersList%)')]
public function setTimeout($key, $ttl) {}





















public function expireAt($key, $timestamp) {}




















public function pExpireAt($key, $timestamp) {}

















public function keys($pattern) {}







#[Deprecated(replacement: '%class%->keys(%parametersList%)')]
public function getKeys($pattern) {}















public function dbSize() {}














public function auth($password) {}











public function bgrewriteaof() {}




















public function slaveof($host = '127.0.0.1', $port = 6379) {}






























public function slowLog(string $operation, int $length = null) {}

























public function object($string = '', $key = '') {}












public function save() {}












public function bgsave() {}











public function lastSave() {}
















public function wait($numSlaves, $timeout) {}





















public function type($key) {}



















public function append($key, $value) {}




















public function getRange($key, $start, $end) {}










#[Deprecated]
public function substr($key, $start, $end) {}




















public function setRange($key, $offset, $value) {}
















public function strlen($key) {}




































public function bitpos($key, $bit, $start = 0, $end = null) {}



















public function getBit($key, $offset) {}





















public function setBit($key, $offset, $value) {}




















public function bitCount($key) {}

























public function bitOp($operation, $retKey, $key1, ...$otherKeys) {}









public function flushDB() {}











public function flushAll() {}

































public function sort($key, $option = null) {}


































































public function info($option = null) {}














public function role() {}

















public function resetStat() {}

















public function ttl($key) {}



















public function pttl($key) {}













public function persist($key) {}






















public function mSet(array $array) {}




















#[Deprecated(replacement: '%class%->mGet(%parametersList%)')]
public function getMultiple(array $keys) {}





























public function mGet(array $array) {}










public function msetnx(array $array) {}














































public function rPopLPush($srcKey, $dstKey) {}














public function bRPopLPush($srcKey, $dstKey, $timeout) {}













































public function zAdd($key, $options, $score1, $value1 = null, $score2 = null, $value2 = null, $scoreN = null, $valueN = null) {}





























public function zRange($key, $start, $end, $withscores = null) {}

























public function zRem($key, $member1, ...$otherMembers) {}












#[Deprecated(replacement: '%class%->zRem(%parametersList%)')]
public function zDelete($key, $member1, ...$otherMembers) {}






























public function zRevRange($key, $start, $end, $withscore = null) {}































public function zRangeByScore($key, $start, $end, array $options = []) {}












public function zRevRangeByScore($key, $start, $end, array $options = []) {}





























public function zRangeByLex($key, $min, $max, $offset = null, $limit = null) {}















public function zRevRangeByLex($key, $min, $max, $offset = null, $limit = null) {}























public function zCount($key, $start, $end) {}





















public function zRemRangeByScore($key, $start, $end) {}








#[Deprecated(replacement: '%class%->zRemRangeByScore(%parametersList%)')]
public function zDeleteRangeByScore($key, $start, $end) {}






















public function zRemRangeByRank($key, $start, $end) {}










#[Deprecated(replacement: '%class%->zRemRangeByRank(%parametersList%)')]
public function zDeleteRangeByRank($key, $start, $end) {}



















public function zCard($key) {}







#[Deprecated(replacement: '%class%->zCard(%parametersList%)')]
public function zSize($key) {}


















public function zScore($key, $member) {}
























public function zRank($key, $member) {}












public function zRevRank($key, $member) {}





















public function zIncrBy($key, $value, $member) {}










































public function zUnionStore($output, $zSetKeys, ?array $weights = null, $aggregateFunction = 'SUM') {}









#[Deprecated(replacement: '%class%->zUnionStore(%parametersList%)')]
public function zUnion($Output, $ZSetKeys, array $Weights = null, $aggregateFunction = 'SUM') {}














































public function zInterStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM') {}








#[Deprecated(replacement: '%class%->zInterStore(%parametersList%)')]
public function zInter($Output, $ZSetKeys, array $Weights = null, $aggregateFunction = 'SUM') {}
























public function zScan($key, &$iterator, $pattern = null, $count = 0) {}



























public function bzPopMax($key1, $key2, $timeout) {}















public function bzPopMin($key1, $key2, $timeout) {}






















public function zPopMax($key, $count = 1) {}






















public function zPopMin($key, $count = 1) {}

























public function hSet($key, $hashKey, $value) {}





















public function hSetNx($key, $hashKey, $value) {}














public function hGet($key, $hashKey) {}



















public function hLen($key) {}


































public function hDel($key, $hashKey1, ...$otherHashKeys) {}


































public function hKeys($key) {}


































public function hVals($key) {}


































public function hGetAll($key) {}



















public function hExists($key, $hashKey) {}




















public function hIncrBy($key, $hashKey, $value) {}
































public function hIncrByFloat($key, $field, $increment) {}




















public function hMSet($key, $hashKeys) {}





















public function hMGet($key, $hashKeys) {}
























public function hScan($key, &$iterator, $pattern = null, $count = 0) {}















public function hStrLen(string $key, string $field) {}





























public function geoAdd($key, $longitude, $latitude, $member) {}



























public function geoHash($key, ...$member) {}
































public function geoPos(string $key, string $member) {}




















































public function geoDist($key, $member1, $member2, $unit = null) {}





































































































public function geoRadius($key, $longitude, $latitude, $radius, $unit, array $options = null) {}









































public function geoRadiusByMember($key, $member, $radius, $units, array $options = null) {}



















public function config($operation, $key, $value = '') {}




























public function eval($script, $args = [], $numKeys = 0) {}









#[Deprecated(replacement: '%class%->eval(%parametersList%)')]
public function evaluate($script, $args = [], $numKeys = 0) {}























public function evalSha($scriptSha, $args = [], $numKeys = 0) {}








#[Deprecated(replacement: '%class%->evalSha(%parametersList%)')]
public function evaluateSha($scriptSha, $args = [], $numKeys = 0) {}



























public function script($command, $script) {}















public function getLastError() {}



















public function clearLastError() {}


































public function client($command, $value = '') {}

















public function _prefix($value) {}
















public function _unserialize($value) {}





















public function _serialize($value) {}

















public function dump($key) {}




















public function restore($key, $ttl, $value) {}






















public function migrate($host, $port, $key, $db, $timeout, $copy = false, $replace = false) {}



















public function time() {}























public function scan(&$iterator, $pattern = null, $count = 0) {}














public function pfAdd($key, array $elements) {}




















public function pfCount($key) {}





















public function pfMerge($destKey, array $sourceKeys) {}

















public function rawCommand($command, $arguments) {}










public function getMode() {}


















public function xAck($stream, $group, $messages) {}






















public function xAdd($key, $id, $messages, $maxLen = 0, $isApproximate = false) {}




































public function xClaim($key, $group, $consumer, $minIdleTime, $ids, $options = []) {}

















public function xDel($key, $ids) {}




















public function xGroup($operation, $key, $group, $msgId = '', $mkStream = false) {}


















public function xInfo($operation, $stream, $group) {}
















public function xLen($stream) {}























public function xPending($stream, $group, $start = null, $end = null, $count = null, $consumer = null) {}






















public function xRange($stream, $start, $end, $count = null) {}


















public function xRead($streams, $count = null, $block = null) {}























public function xReadGroup($group, $consumer, $streams, $count = null, $block = null) {}




















public function xRevRange($stream, $end, $start, $count = null) {}























public function xTrim($stream, $maxLen, $isApproximate) {}





















public function sAddArray($key, array $values) {}
}

class RedisException extends Exception {}
