<?php










class RedisCluster
{
public const AFTER = 'after';
public const BEFORE = 'before';




public const OPT_SERIALIZER = 1;
public const OPT_PREFIX = 2;
public const OPT_READ_TIMEOUT = 3;
public const OPT_SCAN = 4;
public const OPT_SLAVE_FAILOVER = 5;




public const FAILOVER_NONE = 0;
public const FAILOVER_ERROR = 1;
public const FAILOVER_DISTRIBUTE = 2;
public const FAILOVER_DISTRIBUTE_SLAVES = 3;




public const SCAN_NORETRY = 0;
public const SCAN_RETRY = 1;




public const SCAN_PREFIX = 2;




public const SCAN_NOPREFIX = 3;




public const SERIALIZER_NONE = 0;
public const SERIALIZER_PHP = 1;
public const SERIALIZER_IGBINARY = 2;
public const SERIALIZER_MSGPACK = 3;
public const SERIALIZER_JSON = 4;




public const ATOMIC = 0;
public const MULTI = 1;
public const PIPELINE = 2;




public const REDIS_NOT_FOUND = 0;
public const REDIS_STRING = 1;
public const REDIS_SET = 2;
public const REDIS_LIST = 3;
public const REDIS_ZSET = 4;
public const REDIS_HASH = 5;

































public function __construct($name, $seeds, $timeout = null, $readTimeout = null, $persistent = false, $auth = null) {}




public function close() {}















public function get($key) {}





























public function set($key, $value, $timeout = null) {}































public function mget(array $array) {}



















public function mset(array $array) {}









public function msetnx(array $array) {}




















public function del($key1, ...$otherKeys) {}















public function setex($key, $ttl, $value) {}
















public function psetex($key, $ttl, $value) {}















public function setnx($key, $value) {}
















public function getSet($key, $value) {}















public function exists($key) {}














public function keys($pattern) {}



















public function type($key) {}





























public function lPop($key) {}





























public function rPop($key) {}





















public function lSet($key, $index, $value) {}





















public function sPop($key) {}

























public function lPush($key, $value1, $value2 = null, $valueN = null) {}

























public function rPush($key, $value1, $value2 = null, $valueN = null) {}










































public function blPop(array $keys, $timeout) {}













































public function brPop(array $keys, $timeout) {}



















public function rPushx($key, $value) {}



















public function lPushx($key, $value) {}































public function lInsert($key, $position, $pivot, $value) {}






















public function lIndex($key, $index) {}


























public function lRem($key, $value, $count) {}











public function brpoplpush($srcKey, $dstKey, $timeout) {}











































public function rpoplpush($srcKey, $dstKey) {}




















public function lLen($key) {}

















public function sCard($key) {}































public function sMembers($key) {}



















public function sIsMember($key, $value) {}


















public function sAdd($key, $value1, $value2 = null, $valueN = null) {}















public function sAddArray($key, array $valueArray) {}






















public function sRem($key, $member1, $member2 = null, $memberN = null) {}





































public function sUnion($key1, $key2, $keyN = null) {}








































public function sUnionStore($dstKey, $key1, $key2, $keyN = null) {}






































public function sInter($key1, $key2, $keyN = null) {}






































public function sInterStore($dstKey, $key1, $key2, $keyN = null) {}


































public function sDiff($key1, $key2, $keyN = null) {}





































public function sDiffStore($dstKey, $key1, $key2, $keyN = null) {}




























public function sRandMember($key, $count = null) {}














public function strlen($key) {}










public function persist($key) {}














public function ttl($key) {}














public function pttl($key) {}
















public function zCard($key) {}




















public function zCount($key, $start, $end) {}


















public function zRemRangeByScore($key, $start, $end) {}















public function zScore($key, $member) {}


























public function zAdd($key, $score1, $value1, $score2 = null, $value2 = null, $scoreN = null, $valueN = null) {}


















public function zIncrBy($key, $value, $member) {}
















public function hLen($key) {}
































public function hKeys($key) {}
































public function hVals($key) {}

















public function hGet($key, $hashKey) {}
































public function hGetAll($key) {}
















public function hExists($key, $hashKey) {}

















public function hIncrBy($key, $hashKey, $value) {}






















public function hSet($key, $hashKey, $value) {}


















public function hSetNx($key, $hashKey, $value) {}



















public function hMGet($key, $hashKeys) {}

















public function hMSet($key, $hashKeys) {}


































public function hDel($key, $hashKey1, $hashKey2 = null, $hashKeyN = null) {}




























public function hIncrByFloat($key, $field, $increment) {}















public function dump($key) {}





















public function zRank($key, $member) {}










public function zRevRank($key, $member) {}
















public function incr($key) {}















public function decr($key) {}



















public function incrBy($key, $value) {}


















public function decrBy($key, $value) {}

















public function incrByFloat($key, $increment) {}

















public function expire($key, $ttl) {}

















public function pExpire($key, $ttl) {}


















public function expireAt($key, $timestamp) {}

















public function pExpireAt($key, $timestamp) {}
















public function append($key, $value) {}
















public function getBit($key, $offset) {}


















public function setBit($key, $offset, $value) {}























public function bitOp($operation, $retKey, $key1, $key2, $key3 = null) {}

































public function bitpos($key, $bit, $start = 0, $end = null) {}

















public function bitCount($key) {}









public function lGet($key, $index) {}

















public function getRange($key, $start, $end) {}




















public function lTrim($key, $start, $stop) {}




















public function lRange($key, $start, $end) {}



















public function zRemRangeByRank($key, $start, $end) {}











public function publish($channel, $message) {}

















public function rename($srcKey, $dstKey) {}




















public function renameNx($srcKey, $dstKey) {}

















public function pfCount($key) {}











public function pfAdd($key, array $elements) {}


















public function pfMerge($destKey, array $sourceKeys) {}

















public function setRange($key, $offset, $value) {}

















public function restore($key, $ttl, $value) {}






















public function sMove($srcKey, $dstKey, $member) {}


























public function zRange($key, $start, $end, $withscores = null) {}



























public function zRevRange($key, $start, $end, $withscore = null) {}


































public function zRangeByScore($key, $start, $end, array $options = []) {}











public function zRevRangeByScore($key, $start, $end, array $options = []) {}























public function zRangeByLex($key, $min, $max, $offset = null, $limit = null) {}













public function zRevRangeByLex($key, $min, $max, $offset = null, $limit = null) {}


















public function zLexCount($key, $min, $max) {}



















public function zRemRangeByLex($key, $min, $max) {}


































public function zUnionStore($Output, $ZSetKeys, ?array $Weights = null, $aggregateFunction = 'SUM') {}






































public function zInterStore($Output, $ZSetKeys, array $Weights = null, $aggregateFunction = 'SUM') {}
























public function zRem($key, $member1, $member2 = null, $memberN = null) {}






























public function sort($key, $option = null) {}





















public function object($string = '', $key = '') {}
































public function subscribe($channels, $callback) {}




















public function psubscribe($patterns, $callback) {}







public function unSubscribe($channels, $callback) {}







public function punSubscribe($channels, $callback) {}




















public function evalSha($scriptSha, $args = [], $numKeys = 0) {}





















public function scan(&$iterator, $node, $pattern = null, $count = 0) {}





















public function sScan($key, &$iterator, $pattern = null, $count = 0) {}





















public function zScan($key, &$iterator, $pattern = null, $count = 0) {}





















public function hScan($key, &$iterator, $pattern = null, $count = 0) {}







public function getMode() {}












public function getLastError() {}
















public function clearLastError() {}











public function getOption($option) {}
















public function setOption($option, $value) {}













public function _prefix($value) {}





















public function _serialize($value) {}
















public function _unserialize($value) {}










public function _masters() {}





























public function multi($mode = RedisCluster::MULTI) {}






public function exec() {}





public function discard() {}



















public function watch($key) {}





public function unwatch() {}













public function save($nodeParams) {}










public function bgsave($nodeParams) {}









public function flushDB($nodeParams) {}









public function flushAll($nodeParams) {}














public function dbSize($nodeParams) {}










public function bgrewriteaof($nodeParams) {}










public function lastSave($nodeParams) {}
























































































































































public function info($option = null) {}















public function role($nodeParams) {}














public function randomKey($nodeParams) {}




















public function time($nodeParams) {}










public function ping($nodeParams) {}









public function echo($nodeParams, $msg) {}






public function command() {}










public function rawCommand($nodeParams, $command, $arguments) {}
















public function cluster($nodeParams, $command, $arguments) {}








public function client($nodeParams, $subCmd, $args) {}


















public function config($nodeParams, $operation, $key, $value) {}


























public function pubsub($nodeParams, $keyword, $argument) {}


























public function script($nodeParams, $command, $script) {}














public function slowLog($nodeParams, $command, $argument) {}
















public function geoAdd($key, $longitude, $latitude, $member) {}
















public function geohash($key, $member1, $member2 = null, $memberN = null) {}














public function geopos($key, $member1, $member2 = null, $memberN = null) {}






















public function geoDist($key, $member1, $member2, $unit = 'm') {}

































































public function geoRadius($key, $longitude, $latitude, $radius, $radiusUnit, array $options) {}












public function geoRadiusByMember($key, $member, $radius, $radiusUnit, array $options) {}
}

class RedisClusterException extends Exception {}
