<?php

use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\ExpectedValues;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;









#[Pure]
function strtoupper(string $string): string {}









#[Pure]
function strtolower(string $string): string {}

























#[Pure]
function strpos(string $haystack, string $needle, int $offset = 0): int|false {}
























#[Pure]
function stripos(string $haystack, string $needle, int $offset = 0): int|false {}























#[Pure]
function strrpos(string $haystack, string $needle, int $offset = 0): int|false {}



























#[Pure]
function strripos(string $haystack, string $needle, int $offset = 0): int|false {}









#[Pure]
function strrev(string $string): string {}













#[Pure]
function hebrev(string $string, int $max_chars_per_line = 0): string {}

/**
@removed










*/
#[Deprecated(replacement: 'nl2br(hebrev(%parameter0%))', since: '7.4')]
function hebrevc(string $hebrew_text, $max_chars_per_line): string {}












#[Pure]
function nl2br(string $string, bool $use_xhtml = true): string {}


















#[Pure]
function basename(string $path, string $suffix = ''): string {}






















#[Pure]
function dirname(string $path, #[PhpStormStubsElementAvailable(from: '7.0')] int $levels = 1): string {}
























#[Pure(true)]
function pathinfo(string $path, int $flags = PATHINFO_ALL): array|string {}












#[Pure]
function stripslashes(string $string): string {}









#[Pure]
function stripcslashes(string $string): string {}



















#[Pure]
function strstr(string $haystack, string $needle, bool $before_needle = false): string|false {}



















#[Pure]
function stristr(string $haystack, string $needle, bool $before_needle = false): string|false {}




















#[Pure]
function strrchr(string $haystack, string $needle): string|false {}









function str_shuffle(string $string): string {}


















#[Pure]
function str_word_count(string $string, int $format = 0, ?string $characters): array|int {}






















#[Pure]
#[LanguageLevelTypeAware(["8.0" => "array"], default: "array|false")]
function str_split(string $string, int $length = 1): array|false {}













#[Pure]
function strpbrk(
string $string,
#[PhpStormStubsElementAvailable(from: '5.3', to: '7.0')] $char_list = '',
#[PhpStormStubsElementAvailable(from: '7.1')] string $characters
): string|false {}





























#[Pure]
function substr_compare(string $haystack, string $needle, int $offset, ?int $length, bool $case_insensitive = false): int {}















#[Pure]
function strcoll(string $string1, string $string2): int {}

/**
@removed













*/
#[Deprecated(reason: 'Use the NumberFormatter functionality', since: '7.4')]
function money_format(string $format, float $number): ?string {}
































































#[Pure]
#[LanguageLevelTypeAware(["8.0" => "string"], default: "string|false")]
function substr(string $string, int $offset, ?int $length) {}




































#[Pure]
function substr_replace(array|string $string, array|string $replace, array|int $offset, array|int|null $length = null): array|string {}









#[Pure]
function quotemeta(string $string): string {}









#[Pure]
function ucfirst(string $string): string {}









#[Pure]
function lcfirst(string $string): string {}












#[Pure]
function ucwords(string $string, string $separators = " \t\r\n\f\v"): string {}


















#[Pure]
function strtr(string $string, string $from, string $to): string {}








#[Pure]
function strtr(string $str, array $replace_pairs): string {}









#[Pure]
function addslashes(string $string): string {}



















































#[Pure]
function addcslashes(string $string, string $characters): string {}
























#[Pure]
function rtrim(string $string, string $characters = " \t\n\r\0\x0B"): string {}

























function str_replace(array|string $search, array|string $replace, array|string $subject, &$count): array|string {}























function str_ireplace(array|string $search, array|string $replace, array|string $subject, &$count): array|string {}


















#[Pure]
function str_repeat(string $string, int $times): string {}





















#[Pure]
function count_chars(string $string, int $mode = 0): array|string {}















#[Pure]
function chunk_split(string $string, int $length = 76, string $separator = "\r\n"): string {}















#[Pure]
function trim(string $string, string $characters = " \t\n\r\0\x0B"): string {}






























#[Pure]
function ltrim(string $string, string $characters = " \t\n\r\0\x0B"): string {}

















#[Pure]
function strip_tags(string $string, #[LanguageLevelTypeAware(["7.4" => "string[]|string|null"], default: "string|null")] $allowed_tags = null): string {}

















function similar_text(string $string1, string $string2, &$percent): int {}






























#[Pure]
#[LanguageLevelTypeAware(["8.0" => "string[]"], default: "string[]|false")]
function explode(string $separator, string $string, int $limit) {}















#[Pure]
function implode(array|string $separator = "", ?array $array): string {}
















#[Pure]
function join(array|string $separator = "", ?array $array): string {}






































































function setlocale(
#[ExpectedValues([LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME, LC_MESSAGES])] int $category,
#[PhpStormStubsElementAvailable(from: '8.0')] $locales,
#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $rest,
...$rest
): string|false {}























































































































#[ArrayShape(["decimal_point" => "string", "thousands_sep" => "string", "grouping" => "array", "int_curr_symbol" => "string", "currency_symbol" => "string", "mon_decimal_point" => "string", "mon_thousands_sep" => "string", "mon_grouping" => "string", "positive_sign" => "string", "negative_sign" => "string", "int_frac_digits" => "string", "frac_digits" => "string", "p_cs_precedes" => "bool", "p_sep_by_space" => "bool", "n_cs_precedes" => "bool", "n_sep_by_space" => "bool", "p_sign_posn" => "int", "n_sign_posn" => "int"])]
#[Pure(true)]
function localeconv(): array {}
