<?php



use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\ExpectedValues;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

class __PHP_Incomplete_Class
{



public $__PHP_Incomplete_Class_Name;
}

class php_user_filter
{
#[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
public $filtername;

#[LanguageLevelTypeAware(['8.1' => 'mixed'], default: '')]
public $params;
public $stream;












































#[TentativeType]
public function filter(
$in,
$out,
&$consumed,
#[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $closing
): int {}





#[TentativeType]
public function onCreate(): bool {}




#[TentativeType]
public function onClose(): void {}
}




class Directory
{



#[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
public $path;




#[LanguageLevelTypeAware(['8.1' => 'mixed'], default: '')]
public $handle;







#[TentativeType]
public function close(#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $dir_handle = null): void {}







#[TentativeType]
public function rewind(#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $dir_handle = null): void {}








#[TentativeType]
public function read(#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $dir_handle = null): string|false {}
}










#[Pure(true)]
function constant(string $name): mixed {}









#[Pure]
function bin2hex(string $string): string {}











#[LanguageLevelTypeAware(["8.0" => "int"], default: "int|false")]
function sleep(int $seconds) {}










function usleep(int $microseconds): void {}




















function time_nanosleep(int $seconds, int $nanoseconds): array|bool {}









function time_sleep_until(float $timestamp): bool {}
































































#[Pure(true)]
#[Deprecated(since: '8.1')]
function strptime(string $timestamp, string $format): array|false {}






function flush(): void {}






















#[Pure]
function wordwrap(string $string, int $width = 75, string $break = "\n", bool $cut_long_words = false): string {}





















































































































#[Pure]
function htmlspecialchars(string $string, int $flags = ENT_QUOTES|ENT_SUBSTITUTE, ?string $encoding = null, bool $double_encode = true): string {}












































#[Pure]
function htmlentities(string $string, int $flags = ENT_QUOTES|ENT_SUBSTITUTE, ?string $encoding, bool $double_encode = true): string {}







































#[Pure]
function html_entity_decode(string $string, int $flags = ENT_QUOTES|ENT_SUBSTITUTE, ?string $encoding): string {}
































#[Pure]
function htmlspecialchars_decode(string $string, int $flags = ENT_QUOTES|ENT_SUBSTITUTE): string {}














































































































































































#[Pure]
function get_html_translation_table(
int $table = 0,
int $flags = ENT_QUOTES|ENT_SUBSTITUTE,
#[PhpStormStubsElementAvailable(from: '7.0')] string $encoding = "UTF-8"
): array {}















#[Pure]
function sha1(string $string, bool $binary = false): string {}













#[Pure(true)]
function sha1_file(string $filename, bool $binary = false): string|false {}














#[Pure]
function md5(string $string, bool $binary = false): string {}













#[Pure(true)]
function md5_file(string $filename, bool $binary = false): string|false {}









#[Pure]
function crc32(string $string): int {}











#[Pure]
function iptcparse(string $iptc_block): array|false {}


















function iptcembed(string $iptc_data, string $filename, int $spool = 0): string|bool {}






























































function getimagesize(string $filename, &$image_info): array|false {}






















































































#[Pure]
function image_type_to_mime_type(int $image_type): string {}













#[Pure]
function image_type_to_extension(int $image_type, bool $include_dot = true): string|false {}





















































































#[LanguageLevelTypeAware(['8.2' => 'true'], default: 'bool')]
function phpinfo(#[ExpectedValues(flags: [INFO_GENERAL, INFO_CREDITS, INFO_CONFIGURATION, INFO_MODULES, INFO_ENVIRONMENT, INFO_VARIABLES, INFO_LICENSE, INFO_ALL])] int $flags = INFO_ALL): bool {}












#[Pure]
function phpversion(?string $extension): string|false {}
































































#[LanguageLevelTypeAware(['8.2' => 'true'], default: 'bool')]
function phpcredits(int $flags = CREDITS_ALL): bool {}

/**
@removed



*/
#[Pure]
function php_logo_guid(): string {}

/**
@removed
*/
function php_real_logo_guid() {}

/**
@removed
*/
function php_egg_logo_guid() {}

/**
@removed



*/
function zend_logo_guid(): string {}


















#[Pure]
function php_sapi_name(): string|false {}











#[Pure(true)]
function php_uname(#[PhpStormStubsElementAvailable(from: '7.0')] string $mode = 'a'): string {}












#[Pure]
function php_ini_scanned_files(): string|false {}







#[Pure]
function php_ini_loaded_file(): string|false {}















#[Pure]
function strnatcmp(string $string1, string $string2): int {}















#[Pure]
function strnatcasecmp(string $string1, string $string2): int {}




















#[Pure]
function substr_count(string $haystack, string $needle, int $offset = 0, ?int $length): int {}



















































#[Pure]
function strspn(string $string, string $characters, int $offset = 0, ?int $length): int {}


















#[Pure]
function strcspn(string $string, string $characters, int $offset = 0, ?int $length): int {}

















function strtok(
string $string,
#[PhpStormStubsElementAvailable(from: '5.3', to: '7.0')] $token,
#[PhpStormStubsElementAvailable(from: '7.1')] ?string $token = null
): string|false {}
