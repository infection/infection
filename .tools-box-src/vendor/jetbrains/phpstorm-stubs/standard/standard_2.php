<?php

use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\ReturnTypeContract as TypeContract;
use JetBrains\PhpStorm\Pure;


















































































































































#[Pure(true)]
function nl_langinfo(int $item): string|false {}









#[Pure]
function soundex(string $string): string {}





























function levenshtein(string $string1, string $string2, int $insertion_cost = 1, int $replacement_cost = 1, int $deletion_cost = 1): int {}









#[Pure]
function chr(int $codepoint): string {}









#[Pure]
function ord(string $character): int {}














function parse_str(
string $string,
#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] &$result = [],
#[PhpStormStubsElementAvailable(from: '8.0')] &$result
): void {}



















#[Pure]
function str_getcsv(string $string, string $separator = ",", string $enclosure = '"', string $escape = "\\"): array {}


























#[Pure]
function str_pad(string $string, int $length, string $pad_string = " ", int $pad_type = STR_PAD_RIGHT): string {}










#[Pure]
function chop(string $string, string $characters): string {}














#[Pure]
function strchr(string $haystack, string $needle, bool $before_needle = false): string|false {}

























#[Pure]
function sprintf(
string $format,
#[PhpStormStubsElementAvailable(from: '5.3', to: '5.6')] $values,
mixed ...$values
): string {}












function printf(string $format, mixed ...$values): int {}












function vprintf(string $format, array $values): int {}














#[Pure]
function vsprintf(string $format, array $values): string {}













function fprintf($stream, string $format, mixed ...$values): int {}














function vfprintf($stream, string $format, array $values): int {}

























function sscanf(string $string, string $format, #[TypeContract(exists: "int|null", notExists: "array|null")] mixed &...$vars): array|int|null {}















function fscanf($stream, string $format, #[TypeContract(exists: "int|false|null", notExists: "array|false|null")] mixed &...$vars): array|int|false|null {}
































#[ArrayShape(["scheme" => "string", "host" => "string", "port" => "int", "user" => "string", "pass" => "string", "query" => "string", "path" => "string", "fragment" => "string"])]
#[Pure]
function parse_url(string $url, int $component = -1): array|string|int|false|null {}

















#[Pure]
function urlencode(string $string): string {}









#[Pure]
function urldecode(string $string): string {}















#[Pure]
function rawurlencode(string $string): string {}









#[Pure]
function rawurldecode(string $string): string {}


































#[Pure]
function http_build_query(object|array $data, string $numeric_prefix = "", ?string $arg_separator = null, int $encoding_type = PHP_QUERY_RFC1738): string {}









#[Pure(true)]
function readlink(string $path): string|false {}











#[Pure(true)]
function linkinfo(string $path): int|false {}












function symlink(string $target, string $link): bool {}








function link(string $target, string $link): bool {}










function unlink(string $filename, $context): bool {}































function exec(string $command, &$output, &$result_code): string|false {}















function system(string $command, &$result_code): string|false {}









#[Pure]
function escapeshellcmd(string $command): string {}









#[Pure]
function escapeshellarg(string $arg): string {}













#[LanguageLevelTypeAware(['8.2' => 'null|false'], default: 'null|bool')]
function passthru(string $command, &$result_code): ?bool {}









function shell_exec(string $command): string|false|null {}







































































function proc_open(array|string $command, array $descriptor_spec, &$pipes, ?string $cwd, ?array $env_vars, ?array $options) {}










function proc_close($process): int {}
















function proc_terminate($process, int $signal = 15): bool {}












































































#[ArrayShape(["command" => "string", "pid" => "int", "running" => "bool", "signaled" => "bool", "stopped" => "bool", "exitcode" => "int", "termsig" => "int", "stopsig" => "int"])]
#[LanguageLevelTypeAware(["8.0" => "array"], default: "array|false")]
function proc_get_status($process) {}












function proc_nice(int $priority): bool {}









function rand(int $min = null, int $max): int {}















function srand(
int $seed = 0,
#[PhpStormStubsElementAvailable(from: '7.1')] int $mode = MT_RAND_MT19937
): void {}






#[Pure]
function getrandmax(): int {}













function mt_rand(int $min = null, int $max): int {}












function mt_srand(
int $seed = 0,
#[PhpStormStubsElementAvailable(from: '7.1')] int $mode = MT_RAND_MT19937
): void {}






#[Pure]
function mt_getrandmax(): int {}














#[Pure]
function getservbyname(string $service, string $protocol): int|false {}













#[Pure]
function getservbyport(int $port, string $protocol): string|false {}









#[Pure]
function getprotobyname(string $protocol): int|false {}









#[Pure]
function getprotobynumber(int $protocol): string|false {}






#[Pure]
function getmyuid(): int|false {}






#[Pure]
function getmygid(): int|false {}






#[Pure]
function getmypid(): int|false {}






#[Pure]
function getmyinode(): int|false {}
