<?php

use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;










































































function stream_select(
?array &$read,
?array &$write,
?array &$except,
?int $seconds,
#[LanguageLevelTypeAware(['8.1' => 'int|null'], default: 'int')] $microseconds
): int|false {}



















function stream_context_create(?array $options, ?array $params) {}
















function stream_context_set_params($context, array $params): bool {}










function stream_context_get_params($context): array {}












function stream_context_set_option($context, string $wrapper_or_options, string $option_name, mixed $value): bool {}








function stream_context_set_option($stream_or_context, array $options): bool {}









function stream_context_get_options($stream_or_context): array {}













function stream_context_get_default(?array $options) {}














function stream_context_set_default(array $options) {}


































function stream_filter_prepend($stream, string $filter_name, int $mode = 0, mixed $params) {}

































function stream_filter_append($stream, string $filter_name, int $mode = 0, mixed $params) {}









function stream_filter_remove($stream_filter): bool {}









































function stream_socket_client(string $address, &$error_code, &$error_message, ?float $timeout, int $flags = STREAM_CLIENT_CONNECT, $context) {}

















































function stream_socket_server(string $address, &$error_code, &$error_message, int $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN, $context) {}



















function stream_socket_accept($socket, ?float $timeout, &$peer_name) {}













function stream_socket_get_name($socket, bool $remote): string|false {}






































function stream_socket_recvfrom($socket, int $length, int $flags = 0, &$address): string|false {}
































function stream_socket_sendto($socket, string $data, int $flags = 0, string $address = ''): int|false {}





















function stream_socket_enable_crypto($stream, bool $enable, ?int $crypto_method, $session_stream): int|bool {}


















function stream_socket_shutdown($stream, int $mode): bool {}



























function stream_socket_pair(int $domain, int $type, int $protocol): array|false {}


















function stream_copy_to_stream($from, $to, ?int $length, int $offset = 0): int|false {}
















function stream_get_contents($stream, ?int $length = null, int $offset = -1): string|false {}









function stream_supports_lock($stream): bool {}





































#[LanguageLevelTypeAware(['8.0' => 'array|false'], default: 'array|false|null')]
function fgetcsv($stream, ?int $length = null, string $separator = ',', string $enclosure = '"', string $escape = '\\') {}





















function fputcsv(
$stream,
array $fields,
string $separator = ",",
string $enclosure = '"',
#[PhpStormStubsElementAvailable(from: '7.0')] string $escape = "\\",
#[PhpStormStubsElementAvailable('8.1')] string $eol = PHP_EOL
): int|false {}
















function flock($stream, int $operation, &$would_block): bool {}






































#[Pure(true)]
function get_meta_tags(string $filename, bool $use_include_path = false): array|false {}
















function stream_set_write_buffer($stream, int $size): int {}
















function stream_set_read_buffer($stream, int $size): int {}















function set_file_buffer($stream, int $size): int {}

/**
@removed












*/
#[Deprecated(replacement: "stream_set_blocking(%parametersList%)", since: 5.3)]
function set_socket_blocking($socket, bool $mode): bool {}



















function stream_set_blocking($stream, bool $enable): bool {}




















function socket_set_blocking($stream, bool $enable): bool {}































































#[ArrayShape(["timed_out" => "bool", "blocked" => "bool", "eof" => "bool", "unread_bytes" => "int", "stream_type" => "string", "wrapper_type" => "string", "wrapper_data" => "mixed", "mode" => "string", "seekable" => "bool", "uri" => "string", "crypto" => "array", "mediatype" => "string"])]
function stream_get_meta_data($stream): array {}



















function stream_get_line($stream, int $length, string $ending = ''): string|false {}





















function stream_wrapper_register(string $protocol, string $class, int $flags = 0): bool {}























function stream_register_wrapper(string $protocol, string $class, int $flags = 0): bool {}








function stream_resolve_include_path(string $filename): string|false {}








function stream_wrapper_unregister(string $protocol): bool {}








function stream_wrapper_restore(string $protocol): bool {}







#[Pure(true)]
function stream_get_wrappers(): array {}






#[Pure(true)]
function stream_get_transports(): array {}










#[Pure]
function stream_is_local($stream): bool {}
















#[Pure(true)]
function get_headers(
string $url,
#[LanguageLevelTypeAware(['8.0' => 'bool'], default: 'int')] $associative = false,
#[PhpStormStubsElementAvailable(from: '7.1')] $context = null
): array|false {}















function stream_set_timeout(
$stream,
int $seconds,
#[PhpStormStubsElementAvailable(from: '5.3', to: '5.6')] int $microseconds,
#[PhpStormStubsElementAvailable(from: '7.0')] int $microseconds = 0
): bool {}

















function socket_set_timeout(
$stream,
int $seconds,
#[PhpStormStubsElementAvailable(from: '5.3', to: '5.6')] int $microseconds,
#[PhpStormStubsElementAvailable(from: '7.0')] int $microseconds = 0
): bool {}

































































function socket_get_status($stream): array {}














#[Pure(true)]
function realpath(string $path): string|false {}

























































#[Pure(true)]
function fnmatch(string $pattern, string $filename, int $flags = 0): bool {}
