<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\ExpectedValues;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Pure;








#[Pure]
function boolval(mixed $value): bool {}



























#[Pure]
function intval(mixed $value, int $base = 10): int {}







#[Pure]
function floatval(mixed $value): float {}










#[Pure]
function doubleval(mixed $value): float {}













#[Pure]
function strval(mixed $value): string {}





















#[Pure]
#[ExpectedValues([
"boolean", "integer", "double", "string", "array", "object", "resource", "NULL", "unknown type", "resource (closed)"
])]
function gettype(mixed $value): string {}



































function settype(mixed &$var, #[ExpectedValues(["bool", "boolean", "int", "integer", "float", "double", "string", "array", "object", "null"])] string $type): bool {}










#[Pure]
function is_null(mixed $value): bool {}










#[Pure]
function is_resource(mixed $value): bool {}










#[Pure]
function is_bool(mixed $value): bool {}











#[Pure]
function is_long(mixed $value): bool {}










#[Pure]
function is_float(mixed $value): bool {}










#[Pure]
function is_int(mixed $value): bool {}











#[Pure]
function is_integer(mixed $value): bool {}











#[Pure]
function is_double(mixed $value): bool {}











#[Pure]
#[Deprecated(since: '7.4')]
function is_real(mixed $var): bool {}










#[Pure]
function is_numeric(mixed $value): bool {}










#[Pure]
function is_string(mixed $value): bool {}










#[Pure]
function is_array(mixed $value): bool {}










#[Pure]
function is_object(mixed $value): bool {}










#[Pure]
function is_scalar(mixed $value): bool {}
























function is_callable(mixed $value, bool $syntax_only = false, &$callable_name): bool {}









#[Pure]
function is_countable(mixed $value): bool {}













function pclose($handle): int {}




















function popen(string $command, string $mode) {}
















function readfile(string $filename, bool $use_include_path = false, $context): int|false {}










function rewind($stream): bool {}










function rmdir(string $directory, $context): bool {}










function umask(?int $mask): int {}










function fclose($stream): bool {}








#[Pure(true)]
function feof($stream): bool {}








function fgetc($stream): string|false {}























function fgets($stream, ?int $length): string|false {}

/**
@removed
















*/
#[Deprecated(since: '7.3')]
function fgetss($handle, ?int $length = null, $allowable_tags = null): false|string {}










function fread($stream, int $length): string|false {}






















































































































































































function fopen(string $filename, string $mode, bool $use_include_path = false, $context) {}










#[LanguageLevelTypeAware(["8.0" => "int"], default: "int|false")]
function fpassthru($stream) {}























function ftruncate($stream, int $size): bool {}








#[Pure(true)]
function fstat($stream): array|false {}



























function fseek($stream, int $offset, int $whence = SEEK_SET): int {}
















#[Pure(true)]
function ftell($stream): int|false {}







function fflush($stream): bool {}






function fsync($stream): bool {}






function fdatasync($stream): bool {}






















function fwrite($stream, string $data, ?int $length): int|false {}

























function fputs($stream, string $data, ?int $length): int|false {}



























function mkdir(string $directory, int $permissions = 0777, bool $recursive = false, $context): bool {}

















function rename(string $from, string $to, $context): bool {}





















function copy(string $from, string $to, $context): bool {}














function tempnam(string $directory, string $prefix): string|false {}







function tmpfile() {}






























#[Pure(true)]
function file(string $filename, int $flags = 0, $context): array|false {}

























#[Pure(true)]
function file_get_contents(string $filename, bool $use_include_path = false, $context, int $offset = 0, ?int $length): string|false {}








































































function file_put_contents(string $filename, mixed $data, int $flags = 0, $context): int|false {}
