<?php

use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;








#[ArrayShape(["type" => "int", "message" => "string", "file" => "string", "line" => "int"])]
#[Pure(true)]
function error_get_last(): ?array {}





















function call_user_func(callable $callback, mixed ...$args): mixed {}












function call_user_func_array(callable $callback, array $args): mixed {}

/**
@removed







*/
#[Deprecated(reason: "use call_user_func() instead", since: "5.3")]
function call_user_method(string $method_name, object &$obj, ...$parameter): mixed {}

/**
@removed







*/
#[Deprecated(reason: "use call_user_func() instead", since: "5.3")]
function call_user_method_array(string $method_name, object &$obj, array $params): mixed {}














function forward_static_call(callable $callback, mixed ...$args): mixed {}












function forward_static_call_array(callable $callback, array $args): mixed {}



























function serialize(mixed $value): string {}











































function unserialize(string $data, #[PhpStormStubsElementAvailable(from: '7.0')] array $options = []): mixed {}










#[PhpStormStubsElementAvailable(from: '8.0')]
function var_dump(mixed $value, mixed ...$values): void {}









#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')]
function var_dump(...$vars): void {}















function var_export(mixed $value, bool $return = false): ?string {}










function debug_zval_dump(
#[PhpStormStubsElementAvailable(from: '8.0')] mixed $value,
#[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] $values,
mixed ...$values
): void {}


















function print_r(mixed $value, bool $return = false): string|bool {}











#[Pure(true)]
function memory_get_usage(bool $real_usage = false): int {}











#[Pure(true)]
function memory_get_peak_usage(bool $real_usage = false): int {}




function memory_reset_peak_usage(): void {}
























#[LanguageLevelTypeAware(['8.2' => 'void'], default: 'null|bool')]
function register_shutdown_function(callable $callback, mixed ...$args): ?bool {}












function register_tick_function(callable $callback, mixed ...$args): bool {}










function unregister_tick_function(callable $callback): void {}















function highlight_file(string $filename, bool $return = false): string|bool {}









function show_source(string $filename, bool $return = false): string|bool {}















function highlight_string(string $string, bool $return = false): string|bool {}









#[Pure(true)]
function hrtime(
#[PhpStormStubsElementAvailable(from: '7.3', to: '7.4')] bool $as_number,
#[PhpStormStubsElementAvailable(from: '8.0')] bool $as_number = false
): array|int|float|false {}
















#[Pure(true)]
function php_strip_whitespace(string $filename): string {}











#[Pure(true)]
function ini_get(string $option): string|false {}


































#[Pure(true)]
function ini_get_all(?string $extension, #[PhpStormStubsElementAvailable(from: '7.0')] bool $details = true): array|false {}

















function ini_set(string $option, #[LanguageLevelTypeAware(['8.1' => 'string|int|float|bool|null'], default: 'string')] $value): string|false {}










function ini_alter(string $option, #[LanguageLevelTypeAware(['8.1' => 'string|int|float|bool|null'], default: 'string')] $value): string|false {}










function ini_restore(string $option): void {}






function ini_parse_quantity(string $shorthand): int {}






#[Pure(true)]
function get_include_path(): string|false {}










function set_include_path(string $include_path): string|false {}

/**
@removed



*/
#[Deprecated(since: '7.4')]
function restore_include_path() {}












































































function setcookie(string $name, $value = "", $expires_or_options = 0, $path = "", $domain = "", $secure = false, $httponly = false): bool {}






















function setcookie(string $name, $value = '', array $options = []): bool {}













function setrawcookie(string $name, $value = '', $expires_or_options = 0, $path = "", $domain = "", $secure = false, $httponly = false): bool {}






















function setrawcookie(string $name, $value = '', array $options = []): bool {}



































function header(string $header, bool $replace = true, int $response_code = 0): void {}










function header_remove(?string $name): void {}

















function headers_sent(&$filename, &$line): bool {}






#[Pure]
function headers_list(): array {}






#[Pure]
function apache_request_headers(): false|array {}







#[Pure]
function getallheaders(): false|array {}






#[Pure(true)]
function connection_aborted(): int {}








#[Pure(true)]
function connection_status(): int {}











function ignore_user_abort(?bool $enable): int {}





























#[Pure(true)]
function parse_ini_file(string $filename, bool $process_sections = false, int $scanner_mode = INI_SCANNER_NORMAL): array|false {}





















#[Pure]
function parse_ini_string(string $ini_string, bool $process_sections = false, int $scanner_mode = INI_SCANNER_NORMAL): array|false {}









#[Pure(true)]
function is_uploaded_file(string $filename): bool {}





















function move_uploaded_file(string $from, string $to): bool {}





#[Pure]
function net_get_interfaces(): array|false {}










#[Pure]
function gethostbyaddr(string $ip): string|false {}










#[Pure]
function gethostbyname(string $hostname): string {}











#[Pure]
function gethostbynamel(string $hostname): array|false {}







#[Pure]
function gethostname(): string|false {}















function dns_check_record(string $hostname, string $type = 'MX'): bool {}















#[Pure]
function checkdnsrr(string $hostname, string $type = 'MX'): bool {}










function dns_get_mx(string $hostname, &$hosts, &$weights): bool {}


















function getmxrr(string $hostname, &$hosts, &$weights): bool {}
















































































































































































































function dns_get_record(string $hostname, int $type = DNS_ANY, &$authoritative_name_servers, &$additional_records, bool $raw = false): array|false {}
