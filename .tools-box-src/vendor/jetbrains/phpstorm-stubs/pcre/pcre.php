<?php


use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;

























































































































































function preg_match(string $pattern, string $subject, &$matches, int $flags = 0, int $offset = 0): int|false {}

























































#[LanguageLevelTypeAware(['8.0' => 'int|false'], default: 'int|false|null')]
function preg_match_all(string $pattern, string $subject, &$matches, int $flags = 0, int $offset = 0) {}























































































function preg_replace(array|string $pattern, array|string $replacement, array|string $subject, int $limit = -1, &$count): array|string|null {}






































































function preg_replace_callback(
array|string $pattern,
callable $callback,
array|string $subject,
int $limit = -1,
&$count,
#[PhpStormStubsElementAvailable(from: '7.4')] int $flags = 0
): array|string|null {}












function preg_replace_callback_array(
array $pattern,
array|string $subject,
int $limit = -1,
&$count,
#[PhpStormStubsElementAvailable(from: '7.4')] int $flags = 0
): array|string|null {}

















function preg_filter(array|string $pattern, array|string $replacement, array|string $subject, int $limit = -1, &$count): array|string|null {}




























#[Pure]
function preg_split(string $pattern, string $subject, int $limit = -1, int $flags = 0): array|false {}















#[Pure]
function preg_quote(string $str, ?string $delimiter = null): string {}


















#[Pure]
function preg_grep(string $pattern, array $array, int $flags = 0): array|false {}












#[Pure(true)]
function preg_last_error(): int {}







#[Pure(true)]
function preg_last_error_msg(): string {}








define('PREG_PATTERN_ORDER', 1);





define('PREG_JIT_STACKLIMIT_ERROR', 6);






define('PREG_SET_ORDER', 2);






define('PREG_OFFSET_CAPTURE', 256);






define('PREG_SPLIT_NO_EMPTY', 1);






define('PREG_SPLIT_DELIM_CAPTURE', 2);









define('PREG_SPLIT_OFFSET_CAPTURE', 4);
define('PREG_GREP_INVERT', 1);






define('PREG_NO_ERROR', 0);






define('PREG_INTERNAL_ERROR', 1);





define('PREG_BACKTRACK_LIMIT_ERROR', 2);





define('PREG_RECURSION_LIMIT_ERROR', 3);






define('PREG_BAD_UTF8_ERROR', 4);








define('PREG_BAD_UTF8_OFFSET_ERROR', 5);








define('PREG_UNMATCHED_AS_NULL', 512);




define('PCRE_VERSION', "8.31 2012-07-06");




define('PCRE_VERSION_MAJOR', 10);




define('PCRE_VERSION_MINOR', 39);




define('PCRE_JIT_SUPPORT', 1);

