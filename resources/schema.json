{
    "$schema": "https://json-schema.org/draft-07/schema#",
    "type": "object",
    "additionalProperties": false,
    "required": [
        "source"
    ],
    "properties": {
        "$schema": {
            "type": "string"
        },
        "timeout": {
            "type": "number",
            "description": "The allowed timeout in seconds.",
            "minimum": "0"
        },
        "source": {
            "type": "object",
            "required": [
                "directories"
            ],
            "additionalProperties": false,
            "properties": {
                "directories": {
                    "type": "array",
                    "minItems": 1,
                    "description": "Contains all folders with source code you want to mutate.",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "excludes": {
                    "type": "array",
                    "minItems": 1,
                    "description": "Contains all folders or files you want to exclude withing your source folders.",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                }
            }
        },
        "logs": {
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "text": {
                    "type": "string",
                    "description": "Human readable text log file."
                },
                "summary": {
                    "type": "string",
                    "definition": "Summary log file, which display the amount of mutants per category, (Killed, Errored, Escaped, Timed Out & Not Covered). More intended for internal purposes."
                },
                "json": {
                    "type": "string",
                    "definition": "JSON log file, which contains information about all mutants, as well as the source and mutated code and test framework output. Useful for using on CI servers to be able to programmatically analyze it."
                },
                "debug": {
                    "type": "string",
                    "description": "Debug log file, which displays what mutations were found on what line, per category. More intended for internal purposes."
                },
                "perMutator": {
                    "type": "string",
                    "description": "Markdown file which will give a break-down of the effectiveness of each mutator."
                },
                "badge": {
                    "type": "object",
                    "description": "Mutation score badge for your GitHub project. If provided, infection will report results for maching branches to an upstream reporting dashboard/collector.",
                    "additionalProperties": false,
                    "required": ["branch"],
                    "properties": {
                        "branch": {
                            "type": "string",
                            "description": "Mutation score badge for your GitHub project. If this value starts and ends with \"/\", it will be considered a regular expression.",
                            "exaples": [
                                "main",
                                "master",
                                "develop",
                                "latest",
                                "/1\\.\\d+/",
                                "/release-.*/",
                                "/feature\\/.*/"
                            ]
                        }
                    }
                },
                "github": {
                    "type": "boolean",
                    "description": "GitHub Annotations for escaped Mutants in the added/modifies files"
                }
            }
        },
        "tmpDir": {
            "type": "string",
            "description": "Folder where Infection creates its configs, caches and other stuff."
        },
        "phpUnit": {
            "type": "object",
            "description": "PHPUnit additional settings.",
            "additionalProperties": false,
            "properties": {
                "configDir": {
                    "type": "string",
                    "description": "Path to directory containing PHPUnit configuration file."
                },
                "customPath": {
                    "type": "string",
                    "description": "Custom path to PHPUnit executable."
                }
            }
        },
        "ignoreMsiWithNoMutations": {
            "type": "boolean",
            "description": "Ignore MSI violations with zero mutations."
        },
        "minMsi": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Minimum Mutation Score Indicator (MSI) percentage value. Should be used in CI server."
        },
        "minCoveredMsi": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Minimum Covered Code Mutation Score Indicator (MSI) percentage value. Should be used in CI server."
        },
        "mutators": {
            "type": "object",
            "additionalProperties": false,
            "description": "Contains the settings for different mutations and profiles",
            "properties": {
                "global-ignore": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "global-ignoreSourceCodeByRegex": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "format": "regex"
                    }
                },

                "@arithmetic": { "$ref": "#/definitions/default-mutator-config" },
                "@boolean": { "$ref": "#/definitions/default-mutator-config" },
                "@conditional_boundary": { "$ref": "#/definitions/default-mutator-config" },
                "@conditional_negotiation": { "$ref": "#/definitions/default-mutator-config" },
                "@equal": { "$ref": "#/definitions/default-mutator-config" },
                "@function_signature": { "$ref": "#/definitions/default-mutator-config" },
                "@identical": { "$ref": "#/definitions/default-mutator-config" },
                "@number": { "$ref": "#/definitions/default-mutator-config" },
                "@operator": { "$ref": "#/definitions/default-mutator-config" },
                "@regex": { "$ref": "#/definitions/default-mutator-config" },
                "@removal": { "$ref": "#/definitions/default-mutator-config" },
                "@return_value": { "$ref": "#/definitions/default-mutator-config" },
                "@sort": { "$ref": "#/definitions/default-mutator-config" },
                "@loop": { "$ref": "#/definitions/default-mutator-config" },
                "@cast": { "$ref": "#/definitions/default-mutator-config" },
                "@unwrap": { "$ref": "#/definitions/default-mutator-config" },
                "@extensions": { "$ref": "#/definitions/default-mutator-config" },

                "@default": { "$ref": "#/definitions/default-mutator-config" },

                "Assignment": { "$ref": "#/definitions/default-mutator-config" },
                "AssignmentEqual": { "$ref": "#/definitions/default-mutator-config" },
                "BitwiseAnd": { "$ref": "#/definitions/default-mutator-config" },
                "BitwiseNot": { "$ref": "#/definitions/default-mutator-config" },
                "BitwiseOr": { "$ref": "#/definitions/default-mutator-config" },
                "BitwiseXor": { "$ref": "#/definitions/default-mutator-config" },
                "Decrement": { "$ref": "#/definitions/default-mutator-config" },
                "DivEqual": { "$ref": "#/definitions/default-mutator-config" },
                "Division": { "$ref": "#/definitions/default-mutator-config" },
                "Exponentiation": { "$ref": "#/definitions/default-mutator-config" },
                "Increment": { "$ref": "#/definitions/default-mutator-config" },
                "Minus": { "$ref": "#/definitions/default-mutator-config" },
                "MinusEqual": { "$ref": "#/definitions/default-mutator-config" },
                "ModEqual": { "$ref": "#/definitions/default-mutator-config" },
                "Modulus": { "$ref": "#/definitions/default-mutator-config" },
                "MulEqual": { "$ref": "#/definitions/default-mutator-config" },
                "Multiplication": { "$ref": "#/definitions/default-mutator-config" },
                "Plus": { "$ref": "#/definitions/default-mutator-config" },
                "PlusEqual": { "$ref": "#/definitions/default-mutator-config" },
                "PowEqual": { "$ref": "#/definitions/default-mutator-config" },
                "ShiftLeft": { "$ref": "#/definitions/default-mutator-config" },
                "ShiftRight": { "$ref": "#/definitions/default-mutator-config" },
                "RoundingFamily": { "$ref": "#/definitions/default-mutator-config" },
                "ArrayItem": { "$ref": "#/definitions/default-mutator-config" },
                "EqualIdentical": { "$ref": "#/definitions/default-mutator-config" },
                "FalseValue": { "$ref": "#/definitions/default-mutator-config" },
                "IdenticalEqual": { "$ref": "#/definitions/default-mutator-config" },
                "InstanceOf_": { "$ref": "#/definitions/default-mutator-config" },
                "LogicalAnd": { "$ref": "#/definitions/default-mutator-config" },
                "LogicalLowerAnd": { "$ref": "#/definitions/default-mutator-config" },
                "LogicalLowerOr": { "$ref": "#/definitions/default-mutator-config" },
                "LogicalNot": { "$ref": "#/definitions/default-mutator-config" },
                "LogicalOr": { "$ref": "#/definitions/default-mutator-config" },
                "NotEqualNotIdentical": { "$ref": "#/definitions/default-mutator-config" },
                "NotIdenticalNotEqual": { "$ref": "#/definitions/default-mutator-config" },
                "TrueValue": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "ignore": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "ignoreSourceCodeByRegex": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "items": {
                                        "type": "string",
                                        "format": "regex"
                                    }
                                },
                                "settings": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                        "in_array": {
                                            "type": "boolean"
                                        },
                                        "array_search": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "Yield_": { "$ref": "#/definitions/default-mutator-config" },
                "YieldValue": { "$ref": "#/definitions/default-mutator-config" },
                "GreaterThan": { "$ref": "#/definitions/default-mutator-config" },
                "GreaterThanOrEqualTo": { "$ref": "#/definitions/default-mutator-config" },
                "LessThan": { "$ref": "#/definitions/default-mutator-config" },
                "LessThanOrEqualTo": { "$ref": "#/definitions/default-mutator-config" },
                "Equal": { "$ref": "#/definitions/default-mutator-config" },
                "GreaterThanNegotiation": { "$ref": "#/definitions/default-mutator-config" },
                "GreaterThanOrEqualToNegotiation": { "$ref": "#/definitions/default-mutator-config" },
                "Identical": { "$ref": "#/definitions/default-mutator-config" },
                "LessThanNegotiation": { "$ref": "#/definitions/default-mutator-config" },
                "LessThanOrEqualToNegotiation": { "$ref": "#/definitions/default-mutator-config" },
                "NotEqual": { "$ref": "#/definitions/default-mutator-config" },
                "NotIdentical": { "$ref": "#/definitions/default-mutator-config" },
                "PublicVisibility": { "$ref": "#/definitions/default-mutator-config" },
                "ProtectedVisibility": { "$ref": "#/definitions/default-mutator-config" },
                "DecrementInteger": { "$ref": "#/definitions/default-mutator-config" },
                "IncrementInteger": { "$ref": "#/definitions/default-mutator-config" },
                "OneZeroFloat": { "$ref": "#/definitions/default-mutator-config" },
                "AssignCoalesce": { "$ref": "#/definitions/default-mutator-config" },
                "Break_": { "$ref": "#/definitions/default-mutator-config" },
                "Continue_": { "$ref": "#/definitions/default-mutator-config" },
                "Ternary": { "$ref": "#/definitions/default-mutator-config" },
                "Throw_": { "$ref": "#/definitions/default-mutator-config" },
                "Finally_": { "$ref": "#/definitions/default-mutator-config" },
                "Coalesce": { "$ref": "#/definitions/default-mutator-config" },
                "Concat": { "$ref": "#/definitions/default-mutator-config" },
                "PregQuote": { "$ref": "#/definitions/default-mutator-config" },
                "PregMatchMatches": { "$ref": "#/definitions/default-mutator-config" },
                "PregMatchRemoveCaret": { "$ref": "#/definitions/default-mutator-config" },
                "PregMatchRemoveDollar": { "$ref": "#/definitions/default-mutator-config" },
                "PregMatchRemoveFlags": { "$ref": "#/definitions/default-mutator-config" },
                "NullSafePropertyCall": { "$ref": "#/definitions/default-mutator-config" },
                "NullSafeMethodCall": { "$ref": "#/definitions/default-mutator-config" },
                "ArrayItemRemoval": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "ignore": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "ignoreSourceCodeByRegex": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "items": {
                                        "type": "string",
                                        "format": "regex"
                                    }
                                },
                                "settings": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                        "remove": {
                                            "type": "string",
                                            "enum": [
                                                "first",
                                                "last",
                                                "all"
                                            ]
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "minimum": 1
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "FunctionCallRemoval": { "$ref": "#/definitions/default-mutator-config" },
                "MethodCallRemoval": { "$ref": "#/definitions/default-mutator-config" },
                "CloneRemoval": { "$ref": "#/definitions/default-mutator-config" },
                "ConcatOperandRemoval": { "$ref": "#/definitions/default-mutator-config" },
                "SharedCaseRemoval": { "$ref": "#/definitions/default-mutator-config" },
                "ArrayOneItem": { "$ref": "#/definitions/default-mutator-config" },
                "FloatNegation": { "$ref": "#/definitions/default-mutator-config" },
                "FunctionCall": { "$ref": "#/definitions/default-mutator-config" },
                "IntegerNegation": { "$ref": "#/definitions/default-mutator-config" },
                "NewObject": { "$ref": "#/definitions/default-mutator-config" },
                "This": { "$ref": "#/definitions/default-mutator-config" },
                "Spaceship": { "$ref": "#/definitions/default-mutator-config" },
                "SpreadOneItem": { "$ref": "#/definitions/default-mutator-config" },
                "SpreadAssignment": { "$ref": "#/definitions/default-mutator-config" },
                "SpreadRemoval": { "$ref": "#/definitions/default-mutator-config" },
                "SyntaxError": { "$ref": "#/definitions/default-mutator-config" },
                "Foreach_": { "$ref": "#/definitions/default-mutator-config" },
                "For_": { "$ref": "#/definitions/default-mutator-config" },
                "DoWhile": { "$ref": "#/definitions/default-mutator-config" },
                "While_": { "$ref": "#/definitions/default-mutator-config" },
                "CastArray": { "$ref": "#/definitions/default-mutator-config" },
                "CastBool": { "$ref": "#/definitions/default-mutator-config" },
                "CastFloat": { "$ref": "#/definitions/default-mutator-config" },
                "CastInt": { "$ref": "#/definitions/default-mutator-config" },
                "CastObject": { "$ref": "#/definitions/default-mutator-config" },
                "CastString": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayChangeKeyCase": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayChunk": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayColumn": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayCombine": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayDiff": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayDiffAssoc": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayDiffKey": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayDiffUassoc": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayDiffUkey": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayFilter": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayFlip": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayIntersect": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayIntersectAssoc": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayIntersectKey": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayIntersectUassoc": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayIntersectUkey": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayKeys": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayMap": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayMerge": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayMergeRecursive": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayPad": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayReduce": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayReplace": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayReplaceRecursive": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayReverse": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArraySlice": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArraySplice": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayUdiff": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayUdiffAssoc": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayUdiffUassoc": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayUintersect": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayUintersectAssoc": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayUintersectUassoc": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayUnique": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapArrayValues": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapLcFirst": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapLtrim": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapRtrim": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapStrIreplace": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapStrRepeat": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapStrReplace": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapStrRev": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapStrShuffle": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapStrToLower": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapStrToUpper": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapSubstr": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapTrim": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapUcFirst": { "$ref": "#/definitions/default-mutator-config" },
                "UnwrapUcWords": { "$ref": "#/definitions/default-mutator-config" },
                "BCMath": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "ignore": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "ignoreSourceCodeByRegex": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "items": {
                                        "type": "string",
                                        "format": "regex"
                                    }
                                },
                                "settings": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                        "bcadd": {
                                            "type": "boolean"
                                        },
                                        "bccomp": {
                                            "type": "boolean"
                                        },
                                        "bcdiv": {
                                            "type": "boolean"
                                        },
                                        "bcmod": {
                                            "type": "boolean"
                                        },
                                        "bcmul": {
                                            "type": "boolean"
                                        },
                                        "bcpow": {
                                            "type": "boolean"
                                        },
                                        "bcsub": {
                                            "type": "boolean"
                                        },
                                        "bcsqrt": {
                                            "type": "boolean"
                                        },
                                        "bcpowmod": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "MBString": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "ignore": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "ignoreSourceCodeByRegex": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "items": {
                                        "type": "string",
                                        "format": "regex"
                                    }
                                },
                                "settings": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                        "mb_chr": {
                                            "type": "boolean"
                                        },
                                        "mb_ord": {
                                            "type": "boolean"
                                        },
                                        "mb_parse_str": {
                                            "type": "boolean"
                                        },
                                        "mb_send_mail": {
                                            "type": "boolean"
                                        },
                                        "mb_strcut": {
                                            "type": "boolean"
                                        },
                                        "mb_stripos": {
                                            "type": "boolean"
                                        },
                                        "mb_stristr": {
                                            "type": "boolean"
                                        },
                                        "mb_strlen": {
                                            "type": "boolean"
                                        },
                                        "mb_strpos": {
                                            "type": "boolean"
                                        },
                                        "mb_strrchr": {
                                            "type": "boolean"
                                        },
                                        "mb_strripos": {
                                            "type": "boolean"
                                        },
                                        "mb_strrpos": {
                                            "type": "boolean"
                                        },
                                        "mb_strstr": {
                                            "type": "boolean"
                                        },
                                        "mb_strtolower": {
                                            "type": "boolean"
                                        },
                                        "mb_strtoupper": {
                                            "type": "boolean"
                                        },
                                        "mb_substr_count": {
                                            "type": "boolean"
                                        },
                                        "mb_substr": {
                                            "type": "boolean"
                                        },
                                        "mb_convert_case": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        },
        "testFramework": {
            "type": "string",
            "description": "Sets the framework to use for testing. Defaults to phpunit.",
            "anyOf": [
                "phpunit",
                "phpspec",
                "codeception"
            ]
        },
        "bootstrap": {
            "type": "string",
            "description": "Use to specify a file to include as part of the startup to pre-configure the infection environment. Useful for adding custom autoloaders not included in composer."
        },
        "initialTestsPhpOptions": {
            "type": "string",
            "description": "Specify an additional php options for the initial test (e.g. enabling Xdebug). --initial-tests-php-options will override this option."
        },
        "testFrameworkOptions": {
            "type": "string",
            "description": "Specify an additional options to pass to the test framework (e.g. enabling Verbose Mode). --test-framework-options will override this option."
        }
    },
    "definitions": {
        "default-mutator-config": {
            "anyOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "ignore": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        },
                        "ignoreSourceCodeByRegex": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "format": "regex"
                            }
                        }
                    }
                }
            ]
        }
    }
}
